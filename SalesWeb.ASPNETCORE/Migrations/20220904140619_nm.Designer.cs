// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SalesWeb.ASPNETCORE.Data;

namespace SalesWeb.ASPNETCORE.Migrations
{
    [DbContext(typeof(SalesWebASPNETCOREContext))]
    [Migration("20220904140619_nm")]
    partial class nm
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SalesWeb.ASPNETCORE.Models.Entities.Departaments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departaments");
                });

            modelBuilder.Entity("SalesWeb.ASPNETCORE.Models.Entities.SalesRecord", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("SalesStatus")
                        .HasColumnType("integer");

                    b.Property<double>("amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("sellersid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("sellersid");

                    b.ToTable("SalesRecords");
                });

            modelBuilder.Entity("SalesWeb.ASPNETCORE.Models.Entities.Sellers", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DepartamentsId")
                        .HasColumnType("integer");

                    b.Property<double>("baseSalary")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("bithDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("DepartamentsId");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("SalesWeb.ASPNETCORE.Models.Entities.SalesRecord", b =>
                {
                    b.HasOne("SalesWeb.ASPNETCORE.Models.Entities.Sellers", "sellers")
                        .WithMany("sales")
                        .HasForeignKey("sellersid");
                });

            modelBuilder.Entity("SalesWeb.ASPNETCORE.Models.Entities.Sellers", b =>
                {
                    b.HasOne("SalesWeb.ASPNETCORE.Models.Entities.Departaments", "departaments")
                        .WithMany("Sellers")
                        .HasForeignKey("DepartamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
